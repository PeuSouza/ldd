import org.xml.sax.helpers.DefaultHandler;

import javax.xml.stream.*;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;


import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
public class STAX {
    public class stax {



        public class Main extends DefaultHandler {
            public static void main(String[] args) throws IOException, XMLStreamException {
                XMLOutputFactory xmlof = XMLOutputFactory.newFactory();
                Writer writer = new FileWriter("LDD2/STAX.html");
                XMLStreamWriter xmlsw = (xmlof.createXMLStreamWriter(writer));

                XMLInputFactory xmlif = XMLInputFactory.newFactory();

                Reader reader;
                reader = new FileReader("products.xml");
                XMLStreamReader xmlsr = xmlif.createXMLStreamReader(reader);

                List<String> vendor = new ArrayList();

                List<String> name = new ArrayList();
                List<String> buy = new ArrayList();
                List<String> msrp = new ArrayList();
                List<String> percent = new ArrayList();


                List<String> name2 = new ArrayList();
                List<String> percentx = new ArrayList();
                List<String> percenty = new ArrayList();

                List<String> ivendor = new ArrayList();

                boolean qvendor = false;
                boolean qname = false;
                boolean qbuy = false;
                boolean qmsrp= false;

                String variavel = null;

                while (xmlsr.hasNext()) {
                    switch (xmlsr.next()) {
                        case XMLStreamReader.START_ELEMENT:
                            variavel = xmlsr.getLocalName();

                            if (variavel.equals("name"))
                            {
                                qname = true;
                            }

                            if (variavel.equals("buyPrice"))
                            {
                                qbuy = true;
                            }

                            if (variavel.equals("MSRP"))
                            {
                                qmsrp = true;
                            }
                            break;

                        case XMLStreamReader.END_ELEMENT:
                            if (xmlsr.getLocalName().equals("product")) {
                            }
                            break;

                        case XMLStreamReader.CHARACTERS:

                            if (qname == true) {
                                name.add(xmlsr.getText());
                                qname = false;
                            }

                        if (qbuy == true) {
                            buy.add(xmlsr.getText());
                            qbuy = false;
                        }


                        if (qmsrp == true) {
                            msrp.add(xmlsr.getText());
                            qmsrp = false;
                        }
                        breas

                    }
                }


                for(int a = 0;a < name.size();a++){
                    double valorx = Double.parseDouble(buy.get(a));
                    double valory = Double.parseDouble(msrp.get(a));


                    double calculo = (valorx * 100)/  valory;

                    percentx.add(String.valueOf((int) Math.round(calculo)));
                }

                System.out.println(percent);

                for (int k = 0; k < percent.size();k++)
                {
                    percentx.add(percent.get(k));
                }

                percent.sort((o1, o2) -> (int) Math.round(Float.parseFloat(o2)) - (int) Math.round(Float.parseFloat(o1)));


                XMLOutputFactory xmlof2 = XMLOutputFactory.newFactory();
                Writer writer2 = new FileWriter("STAX.html");

                xmlsw.writeStartDocument();

                xmlsw.writeStartElement("ol");
                for (int q = 0; q < percent.size();q++)
                {
                    for (int w = 0; w < percent.size();w++)
                    {
                        if (percent.get(q).contains(percentx.get(w)))
                            if (!name2.contains(name.get(w))){
                                name2.add(name.get(w));
                                xmlsw.writeStartElement("li");
                                xmlsw.writeCharacters(name.get(w) + " ("+ percent.get(q)+ ")");
                                xmlsw.writeEndElement();
                            }
                    }
                }

                xmlsw.writeEndElement();
                xmlsw.writeEndDocument();
                xmlsw.close();
            }
        }
    }

}
